<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd">

	<context:component-scan base-package="it.polito.applied.asti.clan.service" />
	<context:component-scan base-package="it.polito.applied.asti.clan.security" />

	<beans:bean id="bCryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

<!-- 	<beans:bean id="smiledExpressionHandler" -->
<!-- 		class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"> -->
<!-- 		<beans:property name="permissionEvaluator"> -->
<!-- 			<beans:ref bean="permissionEvaluatorBean" /> -->
<!-- 		</beans:property> -->
<!-- 	</beans:bean> -->

<!-- 	<beans:bean id="permissionEvaluatorBean" -->
<!-- 		class="it.polito.applied.smiled.security.SmiledPermissionEvaluator" /> -->

	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userServiceImpl">
			<password-encoder ref="bCryptPasswordEncoder" />
		</authentication-provider>
	</authentication-manager>
	
<!-- 	<http use-expressions="true" entry-point-ref="restServicesEntryPoint"> -->
<!--  	   <intercept-url pattern="/**"/> -->
<!-- 		<form-login -->
<!-- 			login-processing-url="/apiLogin" -->
<!-- 			default-target-url="/" -->
<!-- 			authentication-success-handler-ref="authenticationSuccessHandler" -->
<!-- 			authentication-failure-handler-ref="authenticationFailureHandler"/> -->
<!-- 		<logout logout-url="/apiLogout"/>	 -->
<!-- 	</http> -->

	<http use-expressions="true" entry-point-ref="restServicesEntryPoint">
 	   	<intercept-url pattern="/" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/index" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/termini-del-servizio" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/contatti" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/app" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/progetto" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/operator" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/supervisor" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/404" access="permitAll" requires-channel="https"/>
 	   	 	   	
<!--  	   	<intercept-url pattern="/api/v1/test" access="permitAll" requires-channel="https"/> -->
 	   	
<!--  	   	<intercept-url pattern="/api/v1/buyTickets" access="permitAll" requires-channel="https"/> -->

 	   	<intercept-url pattern="/api/v1/name" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/api/v1/loginOperator" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/api/v1/loginSupervisor" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/api/v1/appVersion" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/api/v1/places" access="hasRole('ROLE_ACCESSCONTROL') and (hasIpAddress('10.8.0.5') or hasIpAddress('10.8.0.9'))" requires-channel="https"/>
 	   	<intercept-url pattern="/api/v1/tickets" access="hasRole('ROLE_ACCESSCONTROL') and (hasIpAddress('10.8.0.5') or hasIpAddress('10.8.0.9'))" requires-channel="https"/>
 	   	<intercept-url pattern="/api/v1/roles" access="hasRole('ROLE_ACCESSCONTROL') and (hasIpAddress('10.8.0.5') or hasIpAddress('10.8.0.9'))" requires-channel="https"/>
 	   	<intercept-url pattern="/api/v1/states" access="hasRole('ROLE_ACCESSCONTROL') and (hasIpAddress('10.8.0.5') or hasIpAddress('10.8.0.9'))" requires-channel="https"/>
 	   	<intercept-url pattern="/api/v1/ticket" access="hasRole('ROLE_ACCESSCONTROL') and (hasIpAddress('10.8.0.5') or hasIpAddress('10.8.0.9'))" requires-channel="https"/>

 	   	<intercept-url pattern="/assets/public/**" access="permitAll" requires-channel="https"/>
 	   	<intercept-url pattern="/assets/mobile/**" access="hasRole('ROLE_APP')" requires-channel="https"/>
 	   	<intercept-url pattern="/**" access="isAuthenticated()" requires-channel="https"/>
		<custom-filter ref="customBasicFilter" position="BASIC_AUTH_FILTER"></custom-filter>
	</http>
	
	<beans:bean id="customBasicFilter" class="it.polito.applied.asti.clan.security.CustomAuthenticationFilter"> 
  		<beans:constructor-arg name="authenticationManager" ref="authenticationManager"/>
  		<beans:constructor-arg name="authenticationEntryPoint" ref="restServicesEntryPoint" />
	</beans:bean>

<!-- 	<http use-expressions="true"  entry-point-ref="restServicesEntryPoint"> -->
<!-- 		<intercept-url pattern="/" access="permitAll" requires-channel="https"/> -->
<!-- 		<intercept-url pattern="/login" access="permitAll" requires-channel="https"/> -->
<!-- 		<intercept-url pattern="/assets/public/**" access="permitAll" -->
<!-- 			 requires-channel="https"/> -->
<!-- 		<intercept-url pattern="/websocket/**" access="permitAll" requires-channel="https"/> -->
<!-- 		<intercept-url pattern="/api/v1/register" access="permitAll" -->
<!-- 			 requires-channel="https"/> -->
<!-- 		<intercept-url pattern="/api/v1/users/email" access="hasRole('ROLE_ANONYMOUS')" -->
<!-- 			 requires-channel="https"/> -->
<!-- 		<intercept-url pattern="/registrationConfirm.html" -->
<!-- 			access="permitAll"  requires-channel="https"/> -->
<!-- 		<intercept-url pattern="/api/v1/firstPassword" access="hasRole('ROLE_ANONYMOUS')" -->
<!-- 		 requires-channel="https"/> -->

<!-- 		<intercept-url pattern="/**" access="hasRole('ROLE_USER')" -->
<!-- 			 requires-channel="https"/> -->
		
		
<!-- 		<custom-filter ref="usernamePasswordAuthenticationFilter" position="FORM_LOGIN_FILTER"/> -->
					 
<!-- 		<custom-filter ref="csrfHeaderFilter" before="FORM_LOGIN_FILTER"/> -->
<!-- 		<custom-filter ref="rememberMeFilter" position="REMEMBER_ME_FILTER"/> -->
<!-- 		<custom-filter ref="logoutFilter" position="LOGOUT_FILTER"/>         -->
<!-- 		<csrf token-repository-ref="customCsrfTokenRepository"></csrf> -->

		
		
<!-- 	</http> -->
	
<!-- 	<beans:bean id="usernamePasswordAuthenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"> -->
<!-- 	    <beans:property name="rememberMeServices" ref="rememberMeServices"/> -->
<!-- 	    <beans:property name="authenticationManager" ref="authenticationManager"/> -->
<!-- 	    Haven't added bean definitions of myAuthenticationSuccessHandler and myAuthenticationFailureHandler because they are out of scope of this post. Besides, I think they are too simple to implement. -->
<!-- 	    <beans:property name="authenticationSuccessHandler" ref="authenticationSuccessHandler"/> -->
<!-- 	    <beans:property name="authenticationFailureHandler" ref="authenticationFailureHandler"/> -->
<!-- 	    <beans:property name="filterProcessesUrl" value="/apiLogin"/> -->
<!-- 	</beans:bean> -->
	
<!-- 	<beans:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"> -->
<!-- 	    <beans:constructor-arg ref="logoutSuccessHandler"/> -->
<!-- 	    <beans:constructor-arg> -->
<!-- 	    <beans:array> -->
<!-- 	        <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/> -->
<!-- 	    </beans:array> -->
<!-- 	    </beans:constructor-arg> -->
<!-- 	    <beans:property name="filterProcessesUrl" value="/apiLogout"/> -->
<!-- 	</beans:bean>  -->
	
<!-- 	<beans:bean id="rememberMeFilter" class="it.polito.applied.smiled.security.RememberMeFilter"> -->
<!--   		<beans:property name="rememberMeServices" ref="rememberMeServices"/> -->
<!--   		<beans:property name="authenticationManager" ref="authenticationManager" /> -->
<!-- 	</beans:bean> -->

<!-- 	<beans:bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices"> -->
<!--   		<beans:property name="userDetailsService" ref="userServiceImpl"/> -->
<!--   		<beans:property name="key" value="smiledKey"/> -->
<!--   		<beans:property name="tokenValiditySeconds" value="864000"/> -->
<!-- 	</beans:bean> -->

<!-- 	<beans:bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider"> -->
<!--   		<beans:property name="key" value="smiledKey"/> -->
<!-- 	</beans:bean> -->
	
	
<!-- 	<beans:bean id="customCsrfTokenRepository" -->
<!-- 		class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository"> -->
<!-- 		<beans:property name="headerName" value="X-XSRF-TOKEN" />	 -->
<!-- 	</beans:bean> -->
	
<!-- 	<beans:bean id="customUserDetails" -->
<!-- 		class="it.polito.applied.smiled.security.CustomUserDetails" -->
<!-- 		scope="prototype"> -->
<!-- 	</beans:bean> -->

</beans:beans>
